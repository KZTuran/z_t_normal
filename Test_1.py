import streamlit as st
import pandas as pd
import numpy as np
import io
import time

st.title("üìä –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞")
st.write("–ó–∞–≥—Ä—É–∑–∏ Excel/CSV —Å —Å—ã—Ä—ã–º–∏ –±–∞–ª–ª–∞–º–∏, –≤—ã–±–µ—Ä–∏ –∫–æ–ª–æ–Ω–∫—É(–∏) –∏ —É–∫–∞–∂–∏ —Å –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª", type=["csv", "xlsx"])

if uploaded_file:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º 'Unnamed' –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    df.columns = [
        col if not col.startswith("Unnamed") else f"Column_{i}"
        for i, col in enumerate(df.columns, start=1)
    ]

    st.write("### –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    st.dataframe(df)

    # –° –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ —Å—á–∏—Ç–∞—Ç—å
    start_row = st.number_input(
        "–° –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É? (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 1)",
        min_value=1,
        max_value=len(df),
        value=1
    )

    # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
    columns = st.multiselect(
        "–í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–Ω–∫—É(–∏) —Å —Å—ã—Ä—ã–º–∏ –±–∞–ª–ª–∞–º–∏",
        df.columns
    )

    if st.button("–ü–æ—Å—á–∏—Ç–∞—Ç—å Z –∏ T"):
        if not columns:
            st.warning("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É.")
        else:
            start_time = time.time()

            df_selected = df.iloc[start_row-1:].copy()
            result_df = df.copy()

            z_cols, t_cols = [], []

            for column in columns:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
                scores = pd.to_numeric(df_selected[column], errors="coerce")
                scores_clean = scores.dropna()

                mean = scores_clean.mean()
                sd = scores_clean.std(ddof=1)

                z_col = f"{column}_Z"
                t_col = f"{column}_T"
                z_cols.append(z_col)
                t_cols.append(t_col)

                if pd.isna(sd) or sd == 0:
                    # –ï—Å–ª–∏ —Ä–∞–∑–±—Ä–æ—Å –Ω—É–ª–µ–≤–æ–π/–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ–º NaN –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                    result_df.loc[start_row-1:, z_col] = np.nan
                    result_df.loc[start_row-1:, t_col] = np.nan
                    st.warning(f"–ö–æ–ª–æ–Ω–∫–∞ ¬´{column}¬ª: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ = 0 –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. Z/T –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.")
                    continue

                # 1) –°—á–∏—Ç–∞–µ–º Z –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –±–∞–ª–ª–æ–≤
                z_raw = (scores - mean) / sd

                # 2) –û–∫—Ä—É–≥–ª—è–µ–º Z –¥–æ 2 –∑–Ω–∞–∫–æ–≤ ‚Äî —ç—Ç–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                z_rounded = z_raw.round(2)

                # 3) –°—á–∏—Ç–∞–µ–º T –ò–ó –£–ñ–ï –û–ö–†–£–ì–õ–Å–ù–ù–û–ì–û Z, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥–∏–ª–∞—Å—å
                t_from_z = (50 + 10 * z_rounded).round(2)

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result_df.loc[start_row-1:, z_col] = z_rounded
                result_df.loc[start_row-1:, t_col] = t_from_z

            # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: RAW ‚Üí Z ‚Üí T
            raw_cols = [c for c in df.columns if c not in z_cols and c not in t_cols]
            ordered_cols = raw_cols + z_cols + t_cols
            result_df = result_df[ordered_cols]

            # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            renamed = {}
            for c in raw_cols: renamed[c] = f"RAW | {c}"
            for c in z_cols:  renamed[c] = f"Z | {c[:-2]}"   # –æ–±—Ä–µ–∑–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å '_Z'
            for c in t_cols:  renamed[c] = f"T | {c[:-2]}"   # –æ–±—Ä–µ–∑–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å '_T'
            result_df = result_df.rename(columns=renamed)

            end_time = time.time()  # –∫–æ–Ω–µ—Ü –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            elapsed = end_time - start_time

            st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            st.dataframe(result_df)
            st.write(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed:.3f} —Å–µ–∫.")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel (.xlsx)
            output = io.BytesIO()
            result_df.to_excel(output, index=False, engine="openpyxl")
            excel_data = output.getvalue()

            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Excel (.xlsx)",
                data=excel_data,
                file_name="normalized_scores.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )





# streamlit run C:\Users\Asus\Desktop\–£–Ω–∏–≤–µ—Ä\python\app_1\.venv\Test_1.py
